
=================================================================================================================
개발환경
=================================================================================================================
VMware Player 설치
https://www.vmware.com/kr/products/workstation-player/workstation-player-evaluation.html
여기에서 16.0. 버전을 다운로드 및 설치함

ubuntu 설치
https://releases.ubuntu.com/18.04/

SSH Server 설치
terminal =>
sudo apt install openssh-server					통신하기 위한 서버 구축
sudo apt update
sudo apt upgrade


ip 확인 								오픈 SSH와 연결  
ip a


mobaxterm접속
=================================================================================================================
Bosh VM 배포
=================================================================================================================
PaaS-TA 설치 파일 다운로드


sudo apt install curl
curl -Lo workspace.zip https://nextcloud.paas-ta.org/index.php/s/RHnbWK6ki2MzePf/download		교육용 zip 파일 
unzip workspace.zip -d ./workspace								파일 압축 풀기
cd workspace




종속성 파일 (bosh depledency) 설치								bosh install을 위한 의존성파일 

sudo apt-get update
sudo apt-get install -y build-essential zlibc zlib1g-dev ruby ruby-dev openssl libxslt1-dev libxml2-dev libssl-dev libreadline7 libreadline-dev libyaml-dev libsqlite3-dev sqlite3 


Bosh 설치(BOSH CLI 설치)									ubuntu 18.04 / bosh2 

sudo apt install curl
curl -Lo ./bosh https://github.com/cloudfoundry/bosh-cli/releases/download/v6.4.7/bosh-cli-6.4.7-linux-amd64
chmod +x ./bosh
sudo mv ./bosh /usr/local/bin/bosh
bosh -v 


((((((((((((((((((((((((((((((((예제에서만 실행하는 VIRTUALBOX ))))))))))))))))))))))))))))))))))))))
VirtualBox 6.0 설치

sudo apt upgrade 1234
wget -q https://www.virtualbox.org/download/oracle_vbox_2016.asc -O- | sudo apt-key add -
wget -q https://www.virtualbox.org/download/oracle_vbox.asc -O- | sudo apt-key add -
sudo add-apt-repository "deb http://download.virtualbox.org/virtualbox/debian bionic contrib" 		이  repository에 6.0버전은 더이상 지원하지 않음
sudo gedit /etc/apt/sources.list 				"deb [추가: [arch=amd64] ] http://download.virtualbox.org/virtualbox/debian bionic contrib" 
sudo apt update
sudo apt install virtualbox-6.0
VBoxManage --version 



Deploy Bosh VM

cd ~/workspace/paasta-deployment/bosh/
chmod 755 *.sh							실행 권한 부여 
./deploy-bosh-lite.sh						shell파일 실행 


credhub cli 설치	

해당 bosh  설치 파일에 함께 설치 
wget https://github.com/cloudfoundry-incubator/credhub-cli/releases/download/2.9.0/credhub-linux-2.9.0.tgz
tar -xvf credhub-linux-2.9.0.tgz					tgz 압축 해제
chmod +x credhub 						실행 권한 부여 
sudo mv credhub /usr/local/bin/credhub 	
credhub --version							version 2.9.0
		Have you targeted and authenticated against a CredHub server ? 		Credhub에 로그인 하지 않아서 발생
										== BOSH login shell 적용 후 다시 확인 

Bosh login 쉘 스크립트 생성

vi create-bosh-login.sh					예제를 위해 이미 설정 되어있는 쉘  환경 변수 수정사항이 있으면 여기서 수정.	
		GIT 에서 다운받았을 시 BOSH_DEPLOYMENT_PATH / CURRENT_IAAS 를 수정해주어야 함
		또한 예제에 필요한 BOSH정보는 EXPORT를 통해 생성해 주어야 하고 이는 PAAS-TA홈페이지 설치 가이드에 나와있음 
./create-bosh-login.sh					shell 파일 실행 

Bosh login 쉘 적용
BOSH LOGIN에 필요한 정보는 vi create-bosh-login.sh > ${BOSH_LOGIN_FILE_PATH}/${BOSH_LOGIN_FILE_NAME}을 참조
source ~/.env/micro-bosh-login-env				login 정상적으로 됨 (source ~login_file_path/micro-bosh-login-env)
credhub --version 확인 					위의 server 문제 뜨지 않고 정상적으로 로그인 확인 


Bosh login 확인

bosh -e micro-bosh env
							(로그인 안됐을 때 user 에  not login 이 뜸)


CREDHUB 인증서 확인

credhub find
		-> 지금은 빈칸이지만 나중에 저장되면 칸에 뜸 



jumpbox key 생성 (Bosh VM 로그인 용) 

bosh int bosh-lite/creds.yml --path /jumpbox_ssh/private_key > jumpbox.key  	yml파일을 통해 생성한 private_key를 jumpbox.key로 사용하겠다.
chmod 600 jumpbox.key							아무나 사용할 수 없게 권한 변경 
ssh jumpbox@10.0.1.6 -i jumpbox.key		 				jumpbox key를 통해 login
									출력 ->	bosh/0:$ 



Bosh로 배포된 프로그램 process 확인 						이는 관리자 권한으로 실행되어야 함.
(bosh vm or paas-ta vm ssh 접속 후 이용)

sudo su									출력 -> bosh/0:/home/jumpbox#		
monit summary 								bosh vm 의 정보 확인
		(nats,blobstore,director,healt_moniter,garden 등등 )		bosh vm이 오류가 나거나 작동이 안할때 들어와서 확인.
					 jumpbox 접속 나갈 떄는 exit / bosh 나갈때 exit 이렇게 두번 하면 ubuntu계정으로 돌아옴.


bosh vm 은 종료 할 때  상태 저장 버튼을 눌러 컴퓨터를 꺼주어야 함
아니면 vm이 망가짐.

1.ubuntu -> virtualbox -> 우클릭 -> 닫기 -> 상태 저장
2.ssh 에서 ~/workspace/paasta-deployment/bosh 에 들어가서 환경 저장 후 종류 


★ 컴퓨터 종료 전 꼭 꼭 꼭 하고 넘어가기 ★
vbox 환경저장 
vboxmanage controlvm $(bosh int bosh-lite/state.json --path /current_vm_cid) savestate

-> 콘솔 창에도 저장하는 중 이라고 뜸 
-> 저장됨 이라고 뜨면 안전하게 종료 
-> 완전히 꺼진 것을 확인하려면 bosh -e micro-bosh env 로 출력이 멈추면 안전하게 종료 된 상태임.~ 





=================================================================================================================
PaaS-TA 배포
=================================================================================================================
 
Virtual Box vm 복구

~/workspace/paasta-deployment/bosh							복구 내용은 bosh폴더로 이동 후 확인 
vboxmanage startvm $(bosh int bosh-lite/state.json --path /current_vm_cid) --type headless

Bosh login
source ~/.env/micro-bosh-login-env



update cloud config	(클라우드 설정 예제)	
							
cd ~/workspace/paasta-deployment/cloud-config					config cloud가 있는 directory로 이동
cat bosh-lite-cloud-config.yml
bosh -e micro-bosh update-cloud-config bosh-lite-cloud-config.yml			정상적으로 업데이트 되었는지 확인
	(director_name)
bosh -e micro-bosh cloud-config							어떤 cloud-config가 올라갔는지 정보 확인



runtime config 등록	(runtime 설정 예제)	
cd ~/workspace/paasta-deployment/bosh						 
source update-runtime-config.sh
bosh -e micro-bosh runtime-config							정상적으로 업데이트 되었는지 확인			 
	※ 예제는 micro-bosh 로 login했기 때문에 cloud-config나 runtime config의 업데이트 확인 시 {dircetor_name}부분은 빼고 수행해도 무관하다.
bosh configs 								runtime,cloud가 업데이트 되었는지 한번에 확인하는 commnad 



stemcell 등록		(stemcell 설정 예제)
cd ~/workspace/paasta-deployment/bosh
source upload-stemcell.sh
bosh -e micro-bosh stemcells




PaaS-TA AP 설치 Variable File
common_vars 수정 
vi ~/workspace/common/common_vars.yml			(vi 는 편집기 )
	1) #BOSH client Admin Secret : ehco $(bosh int) 을 복사하여 출력 확인 후 앞의 bosh_clinet_admin_secret 란에 수정해 주어야 한다.
	2) :q 로 나와준 후 echo $(bosh int ~/workspace/paasta-deployment/bosh/bosh-lite/creds.yml --path /admin_password)
	3) 6ccrxc008ipw29k042r2
	4) vi 모드에서 명령어
		esc	이동 밑 행 삭제 (delete, 한줄삭제 dd 한줄 붙여넣기 yy)
		i	입력모드 	( 자유롭게 수정 가능 , 수정 후 esc)
		:	wq 저장 후 종료 q 종료 (q! 강제종료)
	5) :wq
	6) ※ system_domain 	이후 API를 이용할 때 이용되는 부분으로 10.244.0.nip.io로 변경 해주어야 함.
	

/paasta/vars.yml 수정 
vi ~/workspace/paasta-deployment/paasta/vars.yml
	1) haproxy_public_ip	대부분 system_domain과 일치 시켜야 함 
	2) private_ip 		system_domain
	/home/ubuntu/workspace/common/.common_vars.yml.swp

PaaS-TA 배포
cd ~/workspace/paasta-deployment/paasta
chmod +x ./*.sh
vi deploy-bosh-lite.sh					실행 전 최종사항 확인 
./deploy-bosh-lite.sh


	만약 설치가 안되거나 설정이 잘못 된 것 같을 때는 paas-ta.kr 에서 해당 폴더 git을 찾아 비교 후 다시 다운 받아 recover하거나 
	알맞게 수정 해주자.
		

IP route 설정 (bosh-lite를 이용할때)				최종 배포 전 ip를 연결 하기 
sudo ip route add   10.244.0.0/16 via 10.0.1.6			ip route 해주어야 cf / cf-cli 명령어를 쓸 수 있음 
							paas-ta <-연결--bosh 
ip route							연결 확인 	



========================================================================================


========================================================================================
기타 실습
========================================================================================
기타 알아두어야 할 Bosh 명령어들
bosh -e micro-bosh instances				16개
bosh -e micro-bosh env --details
bosh -e micro-bosh stemcells
bosh -e micro-bosh releases
bosh -e micro-bosh tasks --recent				명령어 모음 ( --renent는 최근 사용한 명령어 출력)
bosh -e micro-bosh locks					lock task가 있는지 확인할 때
bosh -e micro-bosh cancel-task 123				lock task를 풀기 위한 명령어 
bosh -e micro-bosh -d paasta vms --vitals			bosh instances와 비슷한 명령어 ( --vitals cpu상태)
bosh -e micro-bosh -d paasta vms   				파스타 배포 후 vms가 정상적으로 배포되어있는지 확인 
bosh -e micro-bosh -d paasta ssh api				배포되어있는 vms의 api명으로 ssh command를 이용해 접속 
		( jumpbox를 통한 vms 접속방법과 구분하기 / bosh  ssh는 배포되어있는 vms로 접속  )
credhub find						인증서 확인 
							*Error getting token. ~ == 로그인 되지 않았을 때 나오는 화면 
							*다시 로그인 후 확인 


----------------------------------------------------------------------------------> app을 배포하기 위한 과정 >
cf-cli 설치
Home 폴더로 이동 후 진행 
wget -q -O - https://packages.cloudfoundry.org/debian/cli.cloudfoundry.org.key | sudo apt-key add -
echo "deb https://packages.cloudfoundry.org/debian stable main" | sudo tee /etc/apt/sources.list.d/cloudfoundry-cli.list	출력:stable main(정상)
sudo apt update
sudo apt install cf-cli
cf -v						배포된 파스타와 version이 맞아야하므로 8ver까지 가능 



cf login
cf login -a https://api.10.244.0.34.nip.io --skip-ssl-validation 			cf login --skip-ssl-validation / API : https://api.10.244.0.34.nip.io
admin/admin								Email admin / admin


------------------------------------------------------------------------------------>  paas-ta 활용
cf --help 명령어를 통해 자주 사용하거나 모르는 명령어를 활용하자.

user 생성
cf create-user edu-user user 						사용자 입장
	      (id)	      (비밀번호)		

org생성									관리자 입장 
cf create-org edu-org
cf orgs

space
cf spaces									현재 space확인 
cf create-space eud-space							space 생성 
cf create-space -o edu-org edu-space
cf target -o edu-org -s edu-space  (아니면 cf target -o edu-org)
cf target 									현재 target에 관한 정보.


org role 설
cf org-users edu-org							현재 org의 user정보 
cf set-org-role edu-user edu-org OrgManager					사용자에게 역할을 주어짐
	       (username)(org)   (Role)	OrgManager	모든 org를 관리하는 매니저
					BuilingManager	account, payment를 관리자
					OrgAuditor	org를 조회만 할 수 있는 관리자 

space role 설정
cf set-space-role edu-user edu-org edu-space SpaceDeveloper
					SpaceManager	space user 초대 매니저
					SpaceDeveloper	개발자에게 필요한 권한 ( 개발자 권한이 없으면 app manage,deploy할수없음)ㅊㄹ
					SpaceAuditor
https://nextcloud.paas-ta.org/index.php/s/AesWfGRxqwgxNAE/download
-------------------------------------------------------------------------------------------> 앱 배포 
java8  설치
sudo apt update
sudo apt install openjdk-8-jdk





git 설치
sudo apt install git
git --version

spring-music 다운로드 및 빌드
cd ~/workspace
git clone https://github.com/cloudfoundry-samples/spring-music			cloudfoundry에서 제공하는 sample app
cd spring-music/
./gradlew clean assemble							File  compile 과정 , APP을 배포하기 준비단계


workspace>spring-music > manifest.yml
manifest 수정								PaaS-TA 앱을 배포할 때 명령 수행 및 확인. 
vi manifest.yml
		메모리 수정 가능 (cf push 를 이용해서도 배포 가능. cf push --help에 많은 명령어 업로드)

cf target 변경
cf target -o edu-org -s edu-space

spring-music 배포
cf push									Manifest 파일 참조 하는 것 확인 

		cf puch 과정에서 생긴 issue
			1. cf login 확인
			2. cf version 확인
			3. java version 확인
			4. manifest.yml 확인
			5. config-cloud, steamcell, runtime 확인
			6. runtime 문제 
				https://docs.pivotal.io/pivotalcf/2-5/devguide/deploy-apps/manifest-attributes.html
				cf push -t 180 (timeout default는  60인데 180으로 지정 후 push)
				해결했땅!!!!!!!!!!!!!!!!!!!!!!!!!!! ( bosh-lite문제 )
			
cf apps					app이 정상적으로 배포되었는지 확인 
curl 명령어도 확인 가능			json 형식으로 출력 
					spring-music은 paasta, boshlite의 특수한 환경을 통해 내부망을 통해 배포되었으므로
					외부에서는 접근 할 수 없고 ubunutu console을 통해서만 확인이 가능하다 
	
	
로그 확인
cf a					build되고 있는 app의 상황 표시 
cf app spring-music
cf logs spring-music			cf log로 API 처리 과정을 볼 수 있음 
		Uploading droplet 		app이 배포를 하게되면 빌드팩 등 앱이 실행될 패키지를 함께 묶어 droplet를 만들어 업로드 한 후
					app을 다시 실행 시킬 수 있게 하는 과정
		
cf logs spring-music --recent

cf를 이용한 ssh 터널링
cf ssh welcome-cf -L 9999:10.10.4.14:3306



==========================================================
3일차 교육에서  welcome-cf 다운로드 주소 변경
==========================================================

welcome-cf 다운로드 주소
https://nextcloud.paas-ta.org/index.php/s/TCE6Toiirya6kMD/download







